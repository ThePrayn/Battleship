{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nomad\\\\Desktop\\\\bs\\\\battleships-game-page\\\\src\\\\components\\\\PlayerGrid.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport PlayerSquare from './PlayerSquare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlayerGrid = _ref => {\n  _s();\n\n  let {\n    playerGameGrid,\n    setPlayerGameGrid,\n    playerShipYard,\n    playerPlacedShipsNumber,\n    setPlayerPlacedShipsNumber,\n    setWinnerInfo\n  } = _ref;\n  const [shipDirection, setShipDirection] = useState('horizontal');\n\n  const shipDirectionHandler = event => {\n    event.preventDefault();\n\n    if (shipDirection === 'horizontal') {\n      setShipDirection('vertical');\n    } else {\n      setShipDirection('horizontal');\n    }\n  };\n\n  const shipPlacementHandler = (rowIndex, columnIndex) => {\n    const shipLength = playerShipYard[playerPlacedShipsNumber].shipLength;\n    const playerGameGridCopy = [...playerGameGrid];\n\n    if (isPlacementAllowed(rowIndex, columnIndex, shipLength)) {\n      setPlayerPlacedShipsNumber(prevState => prevState + 1);\n\n      if (shipDirection === 'horizontal') {\n        for (let i = 0; i < shipLength; i++) {\n          playerGameGridCopy[rowIndex] = [...playerGameGridCopy[rowIndex]];\n          playerGameGridCopy[rowIndex][columnIndex + i] = playerShipYard[playerPlacedShipsNumber].shipNumber;\n        }\n\n        setPlayerGameGrid([...playerGameGridCopy]);\n      } else {\n        for (let i = 0; i < shipLength; i++) {\n          playerGameGridCopy[rowIndex + i] = [...playerGameGridCopy[rowIndex + i]];\n          playerGameGridCopy[rowIndex + i][columnIndex] = playerShipYard[playerPlacedShipsNumber].shipNumber;\n        }\n\n        setPlayerGameGrid([...playerGameGridCopy]);\n      }\n    } else {\n      console.log('You can not place your ship here');\n    }\n  };\n\n  const isPlacementAllowed = (rowIndex, columnIndex, shipLength) => {\n    let checkNumber = 0;\n\n    if (shipDirection === 'horizontal') {\n      if (columnIndex + shipLength > 10) {\n        return false;\n      }\n\n      for (let i = 0; i < shipLength; i++) {\n        if (isSquareFree(rowIndex, columnIndex + i)) {\n          checkNumber++;\n        }\n      }\n\n      if (checkNumber === shipLength) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (rowIndex + shipLength > 10) {\n        return false;\n      }\n\n      for (let i = 0; i < shipLength; i++) {\n        if (isSquareFree(rowIndex + i, columnIndex)) {\n          checkNumber++;\n        }\n      }\n\n      if (checkNumber === shipLength) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n\n  const isSquareFree = (rowIndex, columnIndex) => {\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        if (playerGameGrid[rowIndex + i] !== undefined && playerGameGrid[rowIndex + i][columnIndex + j] !== undefined) {\n          if (playerGameGrid[rowIndex + i][columnIndex + j] >= 0) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    let availableShips = playerShipYard.filter(ship => ship.sunkStatus === false);\n\n    if (availableShips.length === 0) {\n      setWinnerInfo('You lost this oneðŸ˜¥ Better luck next time!');\n    }\n  }, [playerShipYard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playerGrid\",\n    children: playerGameGrid === null || playerGameGrid === void 0 ? void 0 : playerGameGrid.map((squaresArray, arrayNumber) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: squaresArray === null || squaresArray === void 0 ? void 0 : squaresArray.map((square, squareNumber) => {\n          return /*#__PURE__*/_jsxDEV(PlayerSquare, {\n            rowIndex: arrayNumber,\n            columnIndex: squareNumber,\n            playerGameGrid: playerGameGrid,\n            shipPlacementHandler: shipPlacementHandler,\n            playerPlacedShipsNumber: playerPlacedShipsNumber,\n            shipDirectionHandler: shipDirectionHandler\n          }, `${arrayNumber}${squareNumber}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this);\n        })\n      }, arrayNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlayerGrid, \"BtRb3x+SOi4u7yyW5gwUkHK6ut0=\");\n\n_c = PlayerGrid;\nexport default PlayerGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerGrid\");","map":{"version":3,"sources":["C:/Users/nomad/Desktop/bs/battleships-game-page/src/components/PlayerGrid.js"],"names":["React","useState","useEffect","PlayerSquare","PlayerGrid","playerGameGrid","setPlayerGameGrid","playerShipYard","playerPlacedShipsNumber","setPlayerPlacedShipsNumber","setWinnerInfo","shipDirection","setShipDirection","shipDirectionHandler","event","preventDefault","shipPlacementHandler","rowIndex","columnIndex","shipLength","playerGameGridCopy","isPlacementAllowed","prevState","i","shipNumber","console","log","checkNumber","isSquareFree","j","undefined","availableShips","filter","ship","sunkStatus","length","map","squaresArray","arrayNumber","square","squareNumber"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport PlayerSquare from './PlayerSquare';\r\n\r\nconst PlayerGrid = ({ \r\n  playerGameGrid, \r\n  setPlayerGameGrid, \r\n  playerShipYard, \r\n  playerPlacedShipsNumber, \r\n  setPlayerPlacedShipsNumber, \r\n  setWinnerInfo \r\n}) => {\r\n  const [shipDirection, setShipDirection] = useState('horizontal');\r\n\r\n  const shipDirectionHandler = (event) => {\r\n    event.preventDefault();\r\n    if (shipDirection === 'horizontal') {\r\n      setShipDirection('vertical');\r\n    } else {\r\n      setShipDirection('horizontal');\r\n    }\r\n  }\r\n\r\n  const shipPlacementHandler = (rowIndex, columnIndex) => {\r\n    const shipLength = playerShipYard[playerPlacedShipsNumber].shipLength;\r\n    const playerGameGridCopy = [...playerGameGrid];\r\n\r\n    if (isPlacementAllowed(rowIndex, columnIndex, shipLength)) {\r\n      setPlayerPlacedShipsNumber(prevState => prevState + 1);\r\n      if (shipDirection === 'horizontal') {\r\n        for (let i = 0; i < shipLength; i++) {\r\n          playerGameGridCopy[rowIndex] = [...playerGameGridCopy[rowIndex]];\r\n          playerGameGridCopy[rowIndex][columnIndex + i] = playerShipYard[playerPlacedShipsNumber].shipNumber;\r\n        }\r\n        setPlayerGameGrid([...playerGameGridCopy]);\r\n      } else {\r\n        for (let i = 0; i < shipLength; i++) {\r\n          playerGameGridCopy[rowIndex + i] = [...playerGameGridCopy[rowIndex + i]];\r\n          playerGameGridCopy[rowIndex + i][columnIndex] = playerShipYard[playerPlacedShipsNumber].shipNumber;\r\n        }\r\n        setPlayerGameGrid([...playerGameGridCopy]);\r\n      }\r\n    } else {\r\n      console.log('You can not place your ship here');\r\n    }\r\n  }\r\n\r\n  const isPlacementAllowed = (rowIndex, columnIndex, shipLength) => {\r\n    let checkNumber = 0;\r\n\r\n    if (shipDirection === 'horizontal') {\r\n      if ((columnIndex + shipLength) > 10) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < shipLength; i++) {\r\n        if (isSquareFree(rowIndex, columnIndex + i)) {\r\n          checkNumber++;\r\n        }\r\n      }\r\n      if (checkNumber === shipLength) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n    } else {\r\n      if ((rowIndex + shipLength) > 10) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < shipLength; i++) {\r\n        if (isSquareFree(rowIndex + i, columnIndex)) {\r\n          checkNumber++;\r\n        }\r\n      }\r\n      if (checkNumber === shipLength) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  const isSquareFree = (rowIndex, columnIndex) => {\r\n    for (let i = -1; i <= 1; i++) {\r\n      for (let j = -1; j <= 1; j++) {\r\n        if (playerGameGrid[rowIndex + i] !== undefined && playerGameGrid[rowIndex + i][columnIndex + j] !== undefined) {\r\n          if (playerGameGrid[rowIndex + i][columnIndex + j] >= 0) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  useEffect(() => {\r\n    let availableShips = playerShipYard.filter(ship => ship.sunkStatus === false);\r\n    if (availableShips.length === 0) {\r\n      setWinnerInfo('You lost this oneðŸ˜¥ Better luck next time!');\r\n    }\r\n  }, [playerShipYard]);\r\n\r\n  return (\r\n    <div className='playerGrid'>\r\n      {playerGameGrid?.map((squaresArray, arrayNumber) => {\r\n        return (\r\n          <React.Fragment key={arrayNumber}>\r\n            {squaresArray?.map((square, squareNumber) => {\r\n              return (\r\n                <PlayerSquare \r\n                  key={`${arrayNumber}${squareNumber}`}\r\n                  rowIndex={arrayNumber}\r\n                  columnIndex={squareNumber}\r\n                  playerGameGrid={playerGameGrid}\r\n                  shipPlacementHandler={shipPlacementHandler}\r\n                  playerPlacedShipsNumber={playerPlacedShipsNumber}\r\n                  shipDirectionHandler={shipDirectionHandler}\r\n                >\r\n                </PlayerSquare>\r\n              )\r\n            })}\r\n          </React.Fragment>);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerGrid;"]},"metadata":{},"sourceType":"module"}